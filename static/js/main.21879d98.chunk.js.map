{"version":3,"sources":["components/navbar/navbar.component.jsx","components/scoreboard/scoreboard.component.jsx","components/main/main.component.jsx","components/game-images/game-images.component.jsx","data/imageData.js","home/homepage.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","ScoreBoard","props","Object","keys","map","key","i","replace","Main","score","highScore","Score","Top-Score","GameImages","images","image","data-id","style","backgroundImage","onClick","handleImageCLick","HomePage","state","clickedImageIds","shuffleArray","array","length","j","Math","floor","random","handleImageClick","event","setState","index","target","dataset","id","console","log","includes","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2RAaeA,EATA,WACb,OACE,yBAAKC,UAAU,UACb,wBAAIA,UAAU,QAAd,UACA,wBAAIA,UAAU,gBAAd,0CCASC,EAJI,SAACC,GAAD,OACjBC,OAAOC,KAAKF,GAAOG,KAAI,SAACC,EAAKC,GAAN,OAAY,uBAAGP,UAAU,oBAAoBM,IAAKC,GAAG,0BAAMP,UAAU,aAAaM,EAAIE,QAAQ,IAAK,KAA9C,KAA2D,0BAAMR,UAAU,SAASE,EAAMI,SCczJG,EAfF,SAACP,GAAW,IACfQ,EAAqBR,EAArBQ,MAAOC,EAAcT,EAAdS,UACf,OACA,yBAAKX,UAAU,kBACb,yBAAKA,UAAU,cACb,sCACA,sGAEF,yBAAKA,UAAU,eACb,kBAAC,EAAD,CAAYY,MAAOF,EAAOG,YAAWF,OCQ5BG,G,MAjBI,SAACZ,GAAD,OACjB,yBAAKF,UAAU,uBACb,yBAAKA,UAAU,oBACXE,EAAMa,OAASb,EAAMa,OAAOV,KAAI,SAACW,EAAOT,GACpC,OACA,yBAAKP,UAAU,oBAAoBM,IAAKC,GACtC,yBAAKP,UAAU,aAAaiB,UAASD,EAAOE,MAAO,CAACC,gBAAgB,OAAD,OAASH,EAAT,MAAoBI,QAASlB,EAAMmB,uBAI3G,kCCEMN,EAhBA,CACf,uBACA,wBACA,2BACA,qBACA,sBACA,wBACA,uBACA,yBACA,sBACA,8BACA,0BACA,yBACA,0BCyCeO,E,2MA7CXC,MAAQ,CACRR,OAAQ,GACRS,gBAAiB,GACjBd,MAAO,EACPC,UAAW,G,EAGbc,aAAe,SAACC,GACd,IAAK,IAAInB,EAAImB,EAAMC,OAAS,EAAGpB,EAAI,EAAGA,IAAK,CACzC,IAAMqB,EAAIC,KAAKC,MAAMD,KAAKE,UAAYxB,EAAI,IADD,EAElB,CAACmB,EAAME,GAAIF,EAAMnB,IAAvCmB,EAAMnB,GAFkC,KAE9BmB,EAAME,GAFwB,KAI3C,OAAOF,G,EAOTM,iBAAmB,SAACC,GAClB,EAAKC,SAAS,CAAEnB,OAAQ,EAAKU,aAAa,EAAKF,MAAMR,UACrD,IAAIoB,EAAQF,EAAMG,OAAOC,QAAQC,GACjCC,QAAQC,IAAIL,GACR,EAAKZ,MAAMC,gBAAgBiB,SAASN,GAOjC,EAAKD,SAAS,CAAExB,MAAO,EAAIc,gBAAiB,KANjD,EAAKU,SAAS,CACZV,gBAAiB,CAAC,EAAKD,MAAMC,gBAAiBW,GAC9CzB,MAAO,EAAKa,MAAMb,MAAQ,IACzB,WACE,EAAKa,MAAMZ,UAAY,EAAKY,MAAMb,OAAO,EAAKwB,SAAS,CAAEvB,UAAW,EAAKY,MAAMb,Y,mFAZtFgC,KAAKR,SAAS,CAAEnB,OAAQ2B,KAAKjB,aAAaV,O,+BAiBlC,IAAD,EAC8B2B,KAAKnB,MAAlCR,EADD,EACCA,OAAQL,EADT,EACSA,MAAOC,EADhB,EACgBA,UACvB,OACE,yBAAKX,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAMU,MAAOA,EAAOC,UAAWA,IAC/B,kBAAC,EAAD,CAAYI,OAAQA,EAAQM,iBAAkBqB,KAAKV,wB,GAxCpCW,aCORC,G,uLARX,OACE,6BACE,kBAAC,EAAD,W,GAJUD,cCOEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.21879d98.chunk.js","sourcesContent":["\nimport React from 'react';\n// import './navbar.styles.scss';\n\nconst Navbar = () => {\n  return (\n    <div className=\"navbar\">\n      <h1 className=\"logo\">CLICKY</h1>\n      <h2 className=\"instructions\">Start the game by clicking any image</h2>\n    </div>\n  )\n}\n\nexport default Navbar;","import React from 'react';\n\n// import './score-board.styles.scss';\n\nconst ScoreBoard = (props) => (\n  Object.keys(props).map((key, i) => <p className=\"score-board-score\" key={i}><span className=\"width-150\">{key.replace('-', ' ')}:</span><span className=\"score\">{props[key]}</span></p>)\n)\n\nexport default ScoreBoard;\n","\nimport React from 'react';\nimport ScoreBoard from './../scoreboard/scoreboard.component'\n\nconst Main = (props) => {\n  const { score, highScore } = props;\n  return (\n  <div className=\"main-container\">\n    <div className=\"main-rules\">\n      <h3>Clicky</h3>\n      <p>See how many images you can click before clicking any one image twice.</p>\n    </div>\n    <div className=\"score-board\">\n      <ScoreBoard Score={score} Top-Score={highScore} />\n    </div>\n  </div>\n  )\n}\n\nexport default Main;","import React from 'react';\n\nimport './game-images.styles.css';\n\nconst GameImages = (props) => (\n  <div className=\"gameImagesContainer\">\n    <div className=\"wholeGameWrapper\">\n      { props.images ? props.images.map((image, i) => {\n            return (\n            <div className=\"individualWrapper\" key={i}> \n              <div className=\"game-image\" data-id={image} style={{backgroundImage: `url(${image})`}} onClick={props.handleImageCLick} >\n              </div>\n            </div>\n            );\n      }):<div/>\n    }\n    </div>  \n  </div>\n);\n\n\nexport default GameImages;","const images = [\n\"../images/barney.png\",\n\"../images/bender.jpeg\",\n\"../images/bobbyHill.jpeg\",\n\"../images/fry.jpeg\",\n\"../images/hank.jpeg\",\n\"../images/homer1.jpeg\",\n\"../images/homer2.png\",\n\"../images/maggiee.jpeg\",\n\"../images/marge.png\",\n\"../images/peterGriffin.jpeg\",\n\"../images/spongebob.png\",\n\"../images/stewie1.jpeg\",\n\"../images/stewie2.jpeg\"\n];\n\nexport default images;","import React, { Component } from 'react';\nimport Navbar from '../components/navbar/navbar.component';\nimport Main from '../components/main/main.component';\nimport GameImages from '../components/game-images/game-images.component';\nimport images from '../data/imageData';\n// import shuffleArray from '../randomizer/randomizer';\n\n\nclass HomePage extends Component {\n    state = {\n    images: [],\n    clickedImageIds: [],\n    score: 0,\n    highScore: 0\n  };\n\n  shuffleArray = (array) => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  };\n\n  componentDidMount() {\n    this.setState({ images: this.shuffleArray(images)});\n  }\n\n  handleImageClick = (event) => {\n    this.setState({ images: this.shuffleArray(this.state.images)});\n    let index = event.target.dataset.id;\n    console.log(index)\n    if(!this.state.clickedImageIds.includes(index)) {\n      this.setState({\n        clickedImageIds: [this.state.clickedImageIds, index],\n        score: this.state.score + 1\n      }, () => {\n        if(this.state.highScore < this.state.score) this.setState({ highScore: this.state.score})\n      })\n    } else this.setState({ score: 0 , clickedImageIds: []});\n  };\n\n  render() {\n    const { images, score, highScore } = this.state;\n    return (\n      <div className=\"home-page\">\n        <Navbar />\n        <Main score={score} highScore={highScore} />\n        <GameImages images={images} handleImageCLick={this.handleImageClick} />\n      </div>\n      )\n  }\n}\n\nexport default HomePage;","import React, { Component } from \"react\";\n\nimport HomePage from \"./home/homepage.component\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <HomePage />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}